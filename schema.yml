openapi: 3.0.3
info:
  title: Your API
  version: 1.0.0
  description: API description
paths:
  /lunch_system/api/menu/{id}:
    get:
      operationId: api_menu_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          description: No response body
  /lunch_system/api/menu/g:
    get:
      operationId: api_menu_g_list
      tags:
      - api
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Menu'
          description: ''
  /lunch_system/api/menu/p:
    post:
      operationId: api_menu_p_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MenuRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MenuRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Menu'
          description: ''
  /lunch_system/api/menu/todays_menus:
    get:
      operationId: api_menu_todays_menus_list
      tags:
      - api
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Menu'
          description: ''
  /lunch_system/api/rest/g:
    get:
      operationId: api_rest_g_list
      tags:
      - api
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Restaurant'
          description: ''
  /lunch_system/api/rest/p:
    post:
      operationId: api_rest_p_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RestaurantRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RestaurantRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Restaurant'
          description: ''
  /lunch_system/api/token/:
    post:
      operationId: api_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
        required: true
      security:
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /lunch_system/api/token/refresh/:
    post:
      operationId: api_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      security:
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /lunch_system/employees/create/:
    post:
      operationId: employees_create_create
      tags:
      - employees
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EmployeeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EmployeeRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
          description: ''
  /lunch_system/most-voted-restaurant-menu/:
    get:
      operationId: most_voted_restaurant_menu_retrieve
      tags:
      - most-voted-restaurant-menu
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /lunch_system/votes/:
    get:
      operationId: votes_list
      description: |-
        Returns the object the view is displaying.

        You may want to override this if you need to provide non-standard
        queryset lookups.  Eg if objects are referenced using multiple
        keyword arguments in the url conf.
      tags:
      - votes
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vote'
          description: ''
    put:
      operationId: votes_update
      tags:
      - votes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoteRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VoteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VoteRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vote'
          description: ''
components:
  schemas:
    Employee:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/EmployeeUser'
        department:
          type: string
          maxLength: 255
        position:
          type: string
          maxLength: 255
      required:
      - department
      - position
      - user
    EmployeeRequest:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/EmployeeUserRequest'
        department:
          type: string
          minLength: 1
          maxLength: 255
        position:
          type: string
          minLength: 1
          maxLength: 255
      required:
      - department
      - position
      - user
    EmployeeUser:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          maxLength: 128
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
      required:
      - password
      - username
    EmployeeUserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          minLength: 1
          maxLength: 128
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
      required:
      - password
      - username
    Menu:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        items:
          type: array
          items:
            type: string
        day_of_week:
          type: integer
          maximum: 7
          minimum: 1
        restaurant:
          type: integer
      required:
      - day_of_week
      - id
      - items
      - restaurant
    MenuRequest:
      type: object
      properties:
        items:
          type: array
          items:
            type: string
            minLength: 1
        day_of_week:
          type: integer
          maximum: 7
          minimum: 1
        restaurant:
          type: integer
      required:
      - day_of_week
      - items
      - restaurant
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
      required:
      - id
      - name
    RestaurantRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
      required:
      - name
    TokenObtainPair:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - refresh
    TokenObtainPairRequest:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - password
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
      required:
      - access
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - refresh
    Vote:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        restaurant:
          type: integer
        date:
          type: string
          format: date
      required:
      - date
      - id
      - restaurant
    VoteRequest:
      type: object
      properties:
        restaurant:
          type: integer
        date:
          type: string
          format: date
      required:
      - date
      - restaurant
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
